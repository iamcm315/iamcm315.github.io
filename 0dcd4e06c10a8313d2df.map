{"version":3,"sources":["D:/_Clarence/Playground/BGMaker/src/screens/process.editor/process.editor.tsx","D:/_Clarence/Playground/BGMaker/web-build/register-service-worker.js","D:/_Clarence/Playground/BGMaker/App.tsx","D:/_Clarence/Playground/BGMaker/src/index.tsx","D:/_Clarence/Playground/BGMaker/src/screens/process.editor/index.tsx","D:/_Clarence/Playground/BGMaker/src/screens/process.editor/process.screen.tsx","D:/_Clarence/Playground/BGMaker/src/screens/process.editor/process.selector.tsx"],"names":["navigation","React","useState","x","y","position","setState","lastPosition","useRef","current","pressCount","panResponder","useMemo","PanResponder","create","onStartShouldSetPanResponder","evt","gestureState","onPanResponderGrant","setTimeout","onPanResponderMove","dx","dy","onPanResponderRelease","navigate","routeName","style","flex","flexDirection","overflow","panHandlers","zIndex","transform","translateX","translateY","top","left","navigator","window","addEventListener","serviceWorker","register","scope","then","info","catch","error","console","App","AppNavigator","createStackNavigator","Home","screen","ProcessEditor","Modal","ModalScreen","initialRouteName","headerMode","createAppContainer","ProcessScreen","this","props","PureComponent","alignItems","justifyContent","fontSize","Component"],"mappings":"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","file":"static/js/app.88e0e165.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { View, Text, PanResponder } from \"react-native\";\r\n\r\nexport const ProcessEditor = ({ navigation }) => {\r\n    const [position, setState] = React.useState({ x: 200, y: 200 });\r\n    const lastPosition = React.useRef({ x: 200, y: 200 }).current;\r\n    let pressCount = 0;\r\n    let doubleTapTimeout = 0;\r\n    const panResponder = React.useMemo(() => PanResponder.create({\r\n        onStartShouldSetPanResponder: (evt, gestureState) => true,\r\n        onPanResponderGrant: (evt, gestureState) => {\r\n            pressCount += 1;\r\n            doubleTapTimeout = setTimeout(() => {\r\n                pressCount = 0;\r\n            }, 500)\r\n        },\r\n        onPanResponderMove: (evt, gestureState) => {\r\n            setState({ x: lastPosition.x + gestureState.dx, y: lastPosition.y +  gestureState.dy });\r\n        },\r\n        onPanResponderRelease: (evt, gestureState) => {\r\n            lastPosition.x += gestureState.dx;\r\n            lastPosition.y += gestureState.dy;\r\n            if (pressCount === 2) {\r\n                navigation.navigate({\r\n                    routeName: 'Modal'\r\n                });\r\n            }\r\n        },\r\n        \r\n    }), []);\r\n\r\n    return (\r\n        <View style={{ flex: 1, flexDirection: \"row\", overflow: \"hidden\" }} {...panResponder.panHandlers} > \r\n            <View style={{ flex: 1, zIndex: -1, transform: ([ { translateX: position.x }, { translateY: position.y }]) }} >\r\n                <Text style={{ position: \"absolute\", top: -100, left: -100 }}>A</Text>\r\n                <Text style={{ position: \"absolute\", top: -200, left: -200 }}>A</Text>\r\n                <Text style={{ position: \"absolute\", top: -300, left: -300 }}>A</Text>\r\n                <Text style={{ position: \"absolute\", top: -400, left: -400 }}>A</Text>\r\n                <Text style={{ position: \"absolute\", top: -500, left: -500 }}>A</Text>\r\n                <Text style={{ position: \"absolute\", top: -600, left: -600 }}>A</Text>\r\n                <Text style={{ position: \"absolute\", top: 0, left: 0 }}>A</Text>\r\n                <Text style={{ position: \"absolute\", top: 100, left: 100 }}>A</Text>\r\n                <Text style={{ position: \"absolute\", top: 200, left: 200 }}>A</Text>\r\n                <Text style={{ position: \"absolute\", top: 300, left: 300 }}>A</Text>\r\n                <Text style={{ position: \"absolute\", top: 400, left: 400 }}>A</Text>\r\n                <Text style={{ position: \"absolute\", top: 500, left: 500 }}>A</Text>\r\n                <Text style={{ position: \"absolute\", top: 600, left: 600 }}>A</Text>\r\n            </View>   \r\n        </View>\r\n    );\r\n}","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function() {\n    navigator.serviceWorker\n      .register('/expo-service-worker.js', { scope: '/' })\n      .then(function(info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function(error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n","import App from './src';\nexport default App;","import React, { PureComponent } from \"react\";\r\nimport { ProcessEditor, ModalScreen } from \"./screens/process.editor\";\r\nimport { createAppContainer } from 'react-navigation';\r\nimport { createStackNavigator } from 'react-navigation-stack';\r\nimport { Modal } from \"react-native\";\r\n\r\nconst AppNavigator = createStackNavigator({\r\n    Home: {\r\n      screen: ProcessEditor,\r\n    },\r\n    Modal: {\r\n        screen: ModalScreen\r\n    },\r\n  }, \r\n  {\r\n    initialRouteName: 'Home',\r\n    headerMode: 'none'\r\n  });\r\n  \r\n  export default createAppContainer(AppNavigator);","export * from \"./process.screen\";\r\nexport * from \"./process.editor\";\r\nexport * from \"./process.selector\";","import React, { PureComponent } from \"react\";\r\nimport { View } from \"react-native\";\r\nimport { createStateLink, StateInf, StateLink } from '@hookstate/core';\r\nimport { ItemSelector, PropertyList, AssetViewer } from \"~/controls\"\r\nimport { ProcessEditor } from \"./process.editor\";\r\n\r\nexport class ProcessScreen extends PureComponent {\r\n\r\n    render() {\r\n        return (\r\n            <ProcessEditor navigation={ this.props.navigation } />\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport { View, Text, Button } from \"react-native\";\r\n\r\nexport class ModalScreen extends React.Component {\r\n    render() {\r\n      return (\r\n        <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\r\n          <Text style={{ fontSize: 30 }}>This is a modal!</Text>\r\n        </View>\r\n      );\r\n    }\r\n  }\r\n  "],"sourceRoot":""}