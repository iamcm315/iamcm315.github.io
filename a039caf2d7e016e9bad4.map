{"version":3,"sources":["D:/_Clarence/Playground/BGMaker/src/screens/process.editor/process.editor.tsx","D:/_Clarence/Playground/BGMaker/web-build/register-service-worker.js","D:/_Clarence/Playground/BGMaker/App.tsx","D:/_Clarence/Playground/BGMaker/src/index.tsx","D:/_Clarence/Playground/BGMaker/src/screens/process.editor/index.tsx","D:/_Clarence/Playground/BGMaker/src/screens/process.editor/process.screen.tsx","D:/_Clarence/Playground/BGMaker/src/screens/process.editor/process.node.display.tsx","D:/_Clarence/Playground/BGMaker/src/screens/process.editor/process.selector.tsx"],"names":["navigation","React","useState","x","y","position","setState","lastPosition","useRef","current","pressCount","panResponder","useMemo","PanResponder","create","onStartShouldSetPanResponder","evt","gestureState","onPanResponderGrant","setTimeout","onPanResponderMove","dx","dy","onPanResponderRelease","navigate","routeName","style","flex","flexDirection","overflow","backgroundColor","panHandlers","zIndex","transform","translateX","translateY","ProcessNodeDisplay","id","type","desc","outputs","target","targetID","inputID","inputs","value","height","width","Line","x1","y1","x2","y2","stroke","strokeWidth","navigator","window","addEventListener","serviceWorker","register","scope","then","info","catch","error","console","App","AppNavigator","createStackNavigator","Home","screen","ProcessEditor","Modal","ModalScreen","initialRouteName","headerMode","createAppContainer","ProcessScreen","this","props","PureComponent","ProcessNodeDisplayStyle","StyleSheet","container","alignSelf","padding","connector","borderRadius","inContent","inConnector","outContent","outConnector","ProcessNodeDisplayInParameter","ProcessNodeDisplayConnector","direction","ProcessNodeDisplayOutValue","log","connectorDir","Entypo","name","size","color","top","left","map","i","o","alignItems","justifyContent","fontSize","Component"],"mappings":"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","file":"static/js/app.c271df64.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { View, Text, PanResponder } from \"react-native\";\r\nimport { ProcessNodeDisplay } from \"./process.node.display\";\r\nimport Svg, { Line, Path } from 'react-native-svg';\r\n\r\nexport const ProcessEditor = ({ navigation }) => {\r\n    const [position, setState] = React.useState({ x: 200, y: 200 });\r\n    const lastPosition = React.useRef({ x: 200, y: 200 }).current;\r\n    let pressCount = 0;\r\n    const panResponder = React.useMemo(() => PanResponder.create({\r\n        onStartShouldSetPanResponder: (evt, gestureState) => true,\r\n        onPanResponderGrant: (evt, gestureState) => {\r\n            pressCount += 1;\r\n            setTimeout(() => {\r\n                pressCount = 0;\r\n            }, 500)\r\n        },\r\n        onPanResponderMove: (evt, gestureState) => {\r\n            setState({ x: lastPosition.x + gestureState.dx, y: lastPosition.y +  gestureState.dy });\r\n        },\r\n        onPanResponderRelease: (evt, gestureState) => {\r\n            lastPosition.x += gestureState.dx;\r\n            lastPosition.y += gestureState.dy;\r\n            if (pressCount === 2) {\r\n                navigation.navigate({\r\n                    routeName: 'Modal'\r\n                });\r\n            }\r\n        },\r\n        \r\n    }), []);\r\n\r\n    return (\r\n        <View style={{ flex: 1, flexDirection: \"row\", overflow: \"hidden\", backgroundColor: \"#999999\" }} {...panResponder.panHandlers} > \r\n            <View style={{ flex: 1, zIndex: -1, transform: ([ { translateX: position.x }, { translateY: position.y }]) }} >\r\n                <ProcessNodeDisplay {...{ id: 1, type: 0, desc: \"Roll a Dice\", position: { x: 0, y: 0 }, outputs: [{ target: { targetID: -1, inputID: -1 }}] }} />\r\n                <ProcessNodeDisplay {...{ id: 2, type: 0, desc: \"Add 1\", position: { x: 100, y: 100 } }} />\r\n                <ProcessNodeDisplay {...{ id: 3, type: 0, desc: \"Move Piece\", position: { x: 200, y: 200 } }} />\r\n                <ProcessNodeDisplay {...{ id: 1, type: 0, desc: \"If\", position: { x: -100, y: -100 }, inputs: [{}], outputs: [{ value: \"True\" }, { value: \"False\" }] }} />\r\n                <Svg height=\"100%\" width=\"100%\">\r\n                    <Line x1=\"60\" y1=\"30\" x2=\"100\" y2=\"130\" stroke=\"red\" strokeWidth=\"1\" />\r\n                    <Line x1=\"160\" y1=\"130\" x2=\"200\" y2=\"230\" stroke=\"red\" strokeWidth=\"1\" />\r\n                </Svg>\r\n            </View>   \r\n        </View>\r\n    );\r\n}","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function() {\n    navigator.serviceWorker\n      .register('/expo-service-worker.js', { scope: '/' })\n      .then(function(info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function(error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n","import App from './src';\nexport default App;","import React, { PureComponent } from \"react\";\r\nimport { ProcessEditor, ModalScreen } from \"./screens/process.editor\";\r\nimport { createAppContainer } from 'react-navigation';\r\nimport { createStackNavigator } from 'react-navigation-stack';\r\nimport { Modal } from \"react-native\";\r\n\r\nconst AppNavigator = createStackNavigator({\r\n    Home: {\r\n      screen: ProcessEditor,\r\n    },\r\n    Modal: {\r\n        screen: ModalScreen\r\n    },\r\n  }, \r\n  {\r\n    initialRouteName: 'Home',\r\n    headerMode: 'none'\r\n  });\r\n  \r\n  export default createAppContainer(AppNavigator);","export * from \"./process.screen\";\r\nexport * from \"./process.editor\";\r\nexport * from \"./process.selector\";","import React, { PureComponent } from \"react\";\r\nimport { View } from \"react-native\";\r\nimport { createStateLink, StateInf, StateLink } from '@hookstate/core';\r\nimport { ItemSelector, PropertyList, AssetViewer } from \"~/controls\"\r\nimport { ProcessEditor } from \"./process.editor\";\r\n\r\nexport class ProcessScreen extends PureComponent<any> {\r\n\r\n    render() {\r\n        return (\r\n            <ProcessEditor navigation={ this.props.navigation } />\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport { View, Text, PanResponder, StyleSheet } from \"react-native\";\r\nimport { Entypo } from '@expo/vector-icons';\r\n\r\nconst ProcessNodeDisplayStyle = StyleSheet.create({\r\n    container: {\r\n\t\tposition: \"absolute\",\r\n        zIndex: 1,\r\n        alignSelf: \"flex-start\",\r\n        width: 150,\r\n        padding: 5,\r\n        backgroundColor: \"white\"\r\n    },\r\n    connector: {\r\n        width: 20,\r\n        height: 20,\r\n        borderRadius: 20/2\r\n    },\r\n\tinContent: {\r\n\t\tflexDirection: \"row\",\r\n        alignSelf: \"flex-start\"\r\n    },\r\n    inConnector: {\r\n        backgroundColor: \"green\"\r\n    },\r\n\toutContent: {\r\n\t\tflexDirection: \"row\",\r\n        alignSelf: \"flex-end\",\r\n    },\r\n    outConnector: {\r\n        backgroundColor: \"blue\"\r\n    }\r\n})\r\n\r\nconst ProcessNodeDisplayInParameter = (props: InParameter) => {\r\n    return (\r\n        <View style={ ProcessNodeDisplayStyle.inContent }>\r\n            <ProcessNodeDisplayConnector direction=\"in\" />\r\n            { props.value && \r\n                <Text>{ props.value }</Text>\r\n            }\r\n        </View>\r\n    );\r\n}\r\n\r\nconst ProcessNodeDisplayOutValue = (props: OutValue) => {\r\n    console.log(props)\r\n    return (\r\n        <View style={ ProcessNodeDisplayStyle.outContent }>\r\n            { props.value && \r\n                <Text>{ props.value }</Text>\r\n            }\r\n            <ProcessNodeDisplayConnector direction=\"out\" />\r\n        </View>\r\n    );\r\n}\r\n\r\nconst ProcessNodeDisplayConnector = (props) => {\r\n\tconst connectorDir = props.direction == \"in\" ? \"green\" : \"blue\";\r\n\r\n    return (\r\n        <Entypo name=\"arrow-right\" size={18} color={ connectorDir } />\r\n    )\r\n}\r\n\r\nexport const ProcessNodeDisplay = (props: ProcessNode) => {\r\n    const panResponder = React.useMemo(() => PanResponder.create({\r\n        onStartShouldSetPanResponder: (evt, gestureState) => true,\r\n        onPanResponderMove: (evt, gestureState) => {\r\n            console.log(\"GOGOGO\")\r\n        }        \r\n    }), []);\r\n\r\n    return (\r\n        <View style={ [ ProcessNodeDisplayStyle.container, { top: props.position.x, left: props.position.y }] } {...panResponder.panHandlers}>\r\n            <View>\r\n                <Text>\r\n                    { props.desc }\r\n                </Text>\r\n            </View>\r\n            <View style={{ flexDirection: \"row\" }}>\r\n\t\t\t\t<View style={{ flex: 1 }}>\r\n                    { props.inputs && props.inputs.map((i) => {\r\n                        return <ProcessNodeDisplayInParameter { ...i } />\r\n                    })}\r\n\t\t\t\t</View>\r\n\t\t\t\t<View style={{ flex: 1 }}>\r\n                    { props.outputs && props.outputs.map((o) => {\r\n                        return <ProcessNodeDisplayOutValue { ...o } />\r\n                    })}\r\n\t\t\t\t</View>\r\n            </View>\r\n        </View>\r\n    )\r\n}","import React from \"react\";\r\nimport { View, Text, Button } from \"react-native\";\r\n\r\nexport class ModalScreen extends React.Component {\r\n    render() {\r\n      return (\r\n        <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\r\n          <Text style={{ fontSize: 30 }}>This is a modal!</Text>\r\n        </View>\r\n      );\r\n    }\r\n  }\r\n  "],"sourceRoot":""}