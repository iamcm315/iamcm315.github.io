{"version":3,"sources":["D:/_Clarence/Playground/BGMaker/src/screens/process.editor/index.tsx","D:/_Clarence/Playground/BGMaker/src/screens/process.editor/process.editor.tsx","D:/_Clarence/Playground/BGMaker/web-build/register-service-worker.js","D:/_Clarence/Playground/BGMaker/App.tsx","D:/_Clarence/Playground/BGMaker/src/index.tsx","D:/_Clarence/Playground/BGMaker/src/screens/process.editor/process.screen.tsx","D:/_Clarence/Playground/BGMaker/src/screens/process.editor/process.node.display.tsx","D:/_Clarence/Playground/BGMaker/src/screens/process.editor/process.selector.tsx"],"names":["props","nodes","useStateLink","processNodesSL","connectors","processNodeConnectorsSL","React","useState","x","y","position","setState","lastPosition","useRef","current","pressCount","panResponder","useMemo","PanResponder","create","onStartShouldSetPanResponder","evt","gestureState","onPanResponderGrant","setTimeout","onPanResponderMove","dx","dy","onPanResponderRelease","navigation","navigate","routeName","style","flex","flexDirection","overflow","backgroundColor","panHandlers","zIndex","transform","translateX","translateY","value","map","n","ProcessNodeDisplay","key","id","height","width","c","filter","cc","in","idTargetNode","idNode","idTargetNodeParameter","idParameter","Line","x1","y1","x2","y2","stroke","strokeWidth","navigator","window","addEventListener","serviceWorker","register","scope","then","info","catch","error","console","App","AppNavigator","createStackNavigator","Home","screen","ProcessScreen","Modal","ModalScreen","initialRouteName","headerMode","createAppContainer","createStateLink","type","desc","pos","outputs","target","inputs","ProcessEditor","this","PureComponent","ProcessNodeDisplayStyle","StyleSheet","container","alignSelf","padding","connector","borderRadius","inContent","inConnector","outContent","outConnector","ProcessNodeDisplayInParameter","ProcessNodeDisplayConnector","direction","ProcessNodeDisplayOutValue","marker","connectorsSL","connectorDir","ref","onLayout","measure","pageX","pageY","set","s","isIn","conns","length","push","size","Entypo","name","color","top","left","i","idx","o","alignItems","justifyContent","fontSize","Component"],"mappings":"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","file":"static/js/app.02a7c261.chunk.js","sourcesContent":["export * from \"./process.screen\";\r\nexport * from \"./process.editor\";\r\nexport * from \"./process.node.display\";\r\nexport * from \"./process.selector\";","import React from \"react\";\r\nimport { View, Text, PanResponder } from \"react-native\";\r\nimport { ProcessNodeDisplay } from \".\";\r\nimport { useStateLink } from \"@hookstate/core\";\r\nimport Svg, { Line, Path } from \"react-native-svg\";\r\nimport { ProcessNode, ProcessNodeConnector } from \"~/components\";\r\n\r\nexport const ProcessEditor = (props) => {\r\n    const nodes = useStateLink<ProcessNode[]>(props.processNodesSL);\r\n    const connectors = useStateLink<ProcessNodeConnector[]>(props.processNodeConnectorsSL);\r\n\r\n    const [position, setState] = React.useState({ x: 0, y: 0 });\r\n    const lastPosition = React.useRef({ x: 0, y: 0 }).current;\r\n    let pressCount = 0;\r\n    const panResponder = React.useMemo(() => PanResponder.create({\r\n        onStartShouldSetPanResponder: (evt, gestureState) => true,\r\n        onPanResponderGrant: (evt, gestureState) => {\r\n            pressCount += 1;\r\n            setTimeout(() => {\r\n                pressCount = 0;\r\n            }, 500)\r\n        },\r\n        onPanResponderMove: (evt, gestureState) => {\r\n            setState({ x: lastPosition.x + gestureState.dx, y: lastPosition.y +  gestureState.dy });\r\n        },\r\n        onPanResponderRelease: (evt, gestureState) => {\r\n            lastPosition.x += gestureState.dx;\r\n            lastPosition.y += gestureState.dy;\r\n            if (pressCount === 2) {\r\n                props.navigation.navigate({\r\n                    routeName: 'Modal'\r\n                });\r\n            }\r\n        },\r\n        \r\n    }), []);\r\n\r\n    return (\r\n        <View style={{ flex: 1, flexDirection: \"row\", overflow: \"hidden\", backgroundColor: \"#999999\" }} {...panResponder.panHandlers} > \r\n            <View style={{ flex: 1, zIndex: -1, transform: ([ { translateX: position.x }, { translateY: position.y }]) }} >\r\n                { nodes.value && nodes.value.map(n => \r\n                    <ProcessNodeDisplay key={ n.id } processNodeConnectorsSL={ props.processNodeConnectorsSL } {...n } />\r\n                )}\r\n                <Svg height=\"100%\" width=\"100%\" style={{ zIndex: 2 }} >\r\n                    { connectors.value && connectors.value.map(c => \r\n                        connectors.value.filter(cc => !c.in && cc.in && c.idTargetNode == cc.idNode && c.idTargetNodeParameter == cc.idParameter).map(cc => \r\n                            <Line key={ c.idNode + \"-\" + c.idParameter + \"-\" + cc.idNode + \"-\" + cc.idParameter } x1={ c.position.x + 10 } y1={ c.position.y + 10 } x2={ cc.position.x + 10 } y2={ cc.position.y + 10 } stroke=\"red\" strokeWidth=\"1\" />\r\n                        )\r\n                    )}\r\n                </Svg>\r\n            </View>   \r\n        </View>\r\n    );\r\n}","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function() {\n    navigator.serviceWorker\n      .register('/expo-service-worker.js', { scope: '/' })\n      .then(function(info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function(error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n","import App from './src';\nexport default App;","import React, { PureComponent } from \"react\";\r\nimport { ProcessEditor, ModalScreen, ProcessScreen } from \"./screens/process.editor\";\r\nimport { createAppContainer } from 'react-navigation';\r\nimport { createStackNavigator } from 'react-navigation-stack';\r\nimport { Modal } from \"react-native\";\r\n\r\nconst AppNavigator = createStackNavigator({\r\n    Home: {\r\n      screen: ProcessScreen,\r\n    },\r\n    Modal: {\r\n        screen: ModalScreen\r\n    },\r\n  }, \r\n  {\r\n    initialRouteName: 'Home',\r\n    headerMode: 'none'\r\n  });\r\n  \r\n  export default createAppContainer(AppNavigator);","import React, { PureComponent } from \"react\";\r\nimport { createStateLink, StateInf, StateLink } from '@hookstate/core';\r\nimport { ProcessEditor } from \"./process.editor\";\r\nimport { ProcessNode, ProcessNodeConnector } from \"~/components\";\r\n\r\nexport class ProcessScreen extends PureComponent<any> {\r\n    processNodesSL = createStateLink<ProcessNode[]>([\r\n        { id: 1, type: 1, desc: \"Node 1\", pos: { x: 100, y: 200 }, outputs: [{ target: { idTargetNode: 2, idTargetNodeParameter: 0 }}]},\r\n        { id: 2, type: 1, desc: \"Node 2\", pos: { x: 300, y: 200 }, inputs: [{}], outputs: [{ target: { idTargetNode: 3, idTargetNodeParameter: 0 }, value: \"True\"}, { target: { idTargetNode: 4, idTargetNodeParameter: 0 }, value: \"False\"}]},\r\n        { id: 3, type: 1, desc: \"Node 3.1\", pos: { x: 500, y: 150 }, inputs: [{}]},\r\n        { id: 4, type: 1, desc: \"Node 3.2\", pos: { x: 500, y: 350 }, inputs: [{}]}\r\n    ]);\r\n\r\n    processNodeConnectorsSL = createStateLink<ProcessNodeConnector[]>([]);    \r\n\r\n    render() {\r\n        return (\r\n            <ProcessEditor navigation={ this.props.navigation } processNodesSL={ this.processNodesSL } processNodeConnectorsSL= { this.processNodeConnectorsSL } />\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport { View, Text, PanResponder, StyleSheet } from \"react-native\";\r\nimport { StateInf, StateLink, useStateLink } from \"@hookstate/core\";\r\nimport { Entypo } from \"@expo/vector-icons\";\r\nimport { InParameter, OutValue, ProcessNode, ProcessNodeConnector } from \"~/components\";\r\n\r\nconst ProcessNodeDisplayStyle = StyleSheet.create({\r\n    container: {\r\n\t\tposition: \"absolute\",\r\n        zIndex: 1,\r\n        alignSelf: \"flex-start\",\r\n        width: 150,\r\n        padding: 5,\r\n        backgroundColor: \"white\"\r\n    },\r\n    connector: {\r\n        width: 20,\r\n        height: 20,\r\n        borderRadius: 20/2\r\n    },\r\n\tinContent: {\r\n\t\tflexDirection: \"row\",\r\n        alignSelf: \"flex-start\"\r\n    },\r\n    inConnector: {\r\n        backgroundColor: \"green\"\r\n    },\r\n\toutContent: {\r\n\t\tflexDirection: \"row\",\r\n        alignSelf: \"flex-end\",\r\n    },\r\n    outConnector: {\r\n        backgroundColor: \"blue\"\r\n    }\r\n})\r\n\r\nexport interface ProcessNodeDisplayProps extends ProcessNode {\r\n    processNodeConnectorsSL: StateInf<StateLink<ProcessNodeConnector[]>>;\r\n}\r\n\r\nexport interface ProcessNodeDisplayInParameterProps extends InParameter {\r\n    idNode: number,\r\n    idParameter: number,\r\n    processNodeConnectorsSL: StateInf<StateLink<ProcessNodeConnector[]>>;\r\n}\r\n\r\nexport interface ProcessNodeDisplayOutValueProps extends OutValue {\r\n    idNode: number,\r\n    idParameter: number,\r\n    processNodeConnectorsSL: StateInf<StateLink<ProcessNodeConnector[]>>;\r\n}\r\n\r\nconst ProcessNodeDisplayInParameter = (props: ProcessNodeDisplayInParameterProps) => {\r\n    return (\r\n        <View style={ ProcessNodeDisplayStyle.inContent }>\r\n            <ProcessNodeDisplayConnector\r\n                direction=\"in\"                \r\n                idNode={ props.idNode }\r\n                idParameter={ props.idParameter }\r\n                idTargetNode={ null }\r\n                idTargetNodeParameter={ null }\r\n                processNodeConnectorsSL={ props.processNodeConnectorsSL }\r\n            />\r\n            { props.value && \r\n                <Text>{ props.value }</Text>\r\n            }\r\n        </View>\r\n    );\r\n}\r\n\r\nconst ProcessNodeDisplayOutValue = (props: ProcessNodeDisplayOutValueProps) => {\r\n    return (\r\n        <View style={ ProcessNodeDisplayStyle.outContent }>\r\n            { props.value && \r\n                <Text>{ props.value }</Text>\r\n            }\r\n            <ProcessNodeDisplayConnector\r\n                direction=\"out\"\r\n                idNode={ props.idNode }\r\n                idParameter={ props.idParameter }\r\n                idTargetNode={ props.target.idTargetNode }\r\n                idTargetNodeParameter={ props.target.idTargetNodeParameter }\r\n                processNodeConnectorsSL={ props.processNodeConnectorsSL }\r\n            />\r\n        </View>\r\n    );\r\n}\r\n\r\nconst ProcessNodeDisplayConnector = (props) => {    \r\n    let connectorsSL = useStateLink<ProcessNodeConnector[]>(props.processNodeConnectorsSL);\r\n    let marker;\r\n\r\n    const layoutCb = () => {\r\n        if (!marker) return;\r\n        marker.measure((x, y, width, height, pageX, pageY) => {\r\n            connectorsSL.set(s => {\r\n                let isIn = props.direction == \"in\";\r\n                const conns = s.filter(c => c.in == isIn && c.idNode == props.idNode && c.idParameter == props.idParameter);        \r\n                if (conns.length > 0) {\r\n                    conns[0].position = { x: pageX, y: pageY };\r\n                }\r\n                else {\r\n                    s.push({\r\n                        idNode: props.idNode,\r\n                        idParameter: props.idParameter,\r\n                        in: isIn,\r\n                        idTargetNode: props.idTargetNode,\r\n                        idTargetNodeParameter: props.idTargetNodeParameter,\r\n                        position: { x: pageX, y: pageY },\r\n                        size: { x: 20, y: 20 }            \r\n                    })\r\n                }\r\n                return s;\r\n            });\r\n            \r\n        });\r\n    }\r\n\r\n    const connectorDir = props.direction == \"in\" ? \"green\" : \"blue\";\r\n\r\n    return (\r\n        <View ref={ref => { marker = ref }} onLayout={ layoutCb }>\r\n            <Entypo name=\"arrow-right\" size={18} color={ connectorDir } />\r\n        </View>\r\n    )\r\n}\r\n\r\nexport const ProcessNodeDisplay = (props: ProcessNodeDisplayProps) => {\r\n    const panResponder = React.useMemo(() => PanResponder.create({\r\n        onStartShouldSetPanResponder: (evt, gestureState) => true,\r\n        onPanResponderMove: (evt, gestureState) => {\r\n        }\r\n    }), []);\r\n\r\n    return (\r\n        <View style={ [ProcessNodeDisplayStyle.container, { top: props.pos.y, left: props.pos.x }] } {...panResponder.panHandlers}>\r\n            <View>\r\n                <Text>\r\n                    { props.desc }\r\n                </Text>\r\n            </View>\r\n            <View style={{ flexDirection: \"row\" }}>\r\n\t\t\t\t<View style={{ flex: 1 }}>\r\n                    { props.inputs && props.inputs.map((i, idx) => \r\n                        <ProcessNodeDisplayInParameter key={ props.id + \"-in\" + idx} idNode={ props.id } idParameter={ idx } processNodeConnectorsSL={ props.processNodeConnectorsSL } { ...i } />\r\n                    )}\r\n\t\t\t\t</View>\r\n\t\t\t\t<View style={{ flex: 1 }}>\r\n                    { props.outputs && props.outputs.map((o, idx) =>\r\n                        <ProcessNodeDisplayOutValue key={ props.id + \"-out\" + idx} idNode={ props.id } idParameter={ idx } processNodeConnectorsSL={ props.processNodeConnectorsSL } { ...o } />\r\n                    )}\r\n\t\t\t\t</View>\r\n            </View>\r\n        </View>\r\n    )\r\n}","import React from \"react\";\r\nimport { View, Text, Button } from \"react-native\";\r\n\r\nexport class ModalScreen extends React.Component {\r\n    render() {\r\n      return (\r\n        <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\r\n          <Text style={{ fontSize: 30 }}>This is a modal!</Text>\r\n        </View>\r\n      );\r\n    }\r\n  }\r\n  "],"sourceRoot":""}