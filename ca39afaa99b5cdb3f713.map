{"version":3,"sources":["D:/_Clarence/Playground/BGMaker/src/screens/process.editor/index.tsx","D:/_Clarence/Playground/BGMaker/src/screens/process.editor/process.editor.tsx","D:/_Clarence/Playground/BGMaker/web-build/register-service-worker.js","D:/_Clarence/Playground/BGMaker/App.tsx","D:/_Clarence/Playground/BGMaker/src/index.tsx","D:/_Clarence/Playground/BGMaker/src/screens/process.editor/process.screen.tsx","D:/_Clarence/Playground/BGMaker/src/screens/process.editor/process.node.display.tsx","D:/_Clarence/Playground/BGMaker/src/screens/process.editor/process.selector.tsx"],"names":["props","nodes","useStateLink","processNodesSL","connectors","processNodeConnectorsSL","line","createStateLink","React","useState","x","y","position","setState","lastPosition","useRef","current","pressCount","panResponder","useMemo","PanResponder","create","onStartShouldSetPanResponder","evt","gestureState","onPanResponderGrant","setTimeout","value","filter","c","x0","size","y0","map","set","idNode","idParameter","in","origin","target","onPanResponderMove","l","dx","dy","onPanResponderRelease","navigation","navigate","routeName","style","flex","flexDirection","overflow","backgroundColor","panHandlers","zIndex","transform","translateX","translateY","n","ProcessNodeDisplay","key","id","height","width","cc","idTargetNode","idTargetNodeParameter","Line","x1","y1","x2","y2","stroke","strokeWidth","navigator","window","addEventListener","serviceWorker","register","scope","then","info","catch","error","console","App","AppNavigator","createStackNavigator","Home","screen","ProcessScreen","Modal","ModalScreen","initialRouteName","headerMode","createAppContainer","type","desc","pos","outputs","inputs","ProcessEditor","this","PureComponent","ProcessNodeDisplayStyle","StyleSheet","container","alignSelf","padding","connector","borderRadius","inContent","inConnector","outContent","outConnector","ProcessNodeDisplayInParameter","ProcessNodeDisplayConnector","direction","ProcessNodeDisplayOutValue","_ref","connectorsSL","connectorDir","ref","r","onLayout","measure","pageX","pageY","s","isIn","conns","length","push","Entypo","name","color","top","left","i","idx","o","alignItems","justifyContent","fontSize","Component"],"mappings":"8HAAA,4JACA,4JACA,4JACA,6J,uICHA,U,uBAEA,SACA,QACA,Y,gBAW6B,SAACA,GAC1B,IAAMC,GAAQ,IAAAC,cAA4BF,EAAMG,gBAC1CC,GAAa,IAAAF,cAAqCF,EAAMK,yBACxDC,GAAO,IAAAJ,eAAuB,IAAAK,iBAA0B,KAH1B,EAKPC,UAAMC,SAAS,CAAEC,EAAG,EAAGC,EAAG,IALnB,qBAK7BC,EAL6B,KAKnBC,EALmB,KAM9BC,EAAeN,UAAMO,OAAO,CAAEL,EAAG,EAAGC,EAAG,IAAKK,QAC9CC,EAAa,EACXC,EAAeV,UAAMW,SAAQ,kBAAMC,UAAaC,OAAO,CACzDC,6BAA8B,SAACC,EAAKC,GAAN,OAAuB,GACrDC,oBAAqB,SAACF,EAAKC,GACvBP,GAAc,EACdS,YAAW,WACPT,EAAa,IACd,KAEHb,EAAWuB,MAAMC,QAAO,SAAAC,GAAC,OACrBL,EAAaM,GAAKhB,EAAaJ,EAAImB,EAAEjB,SAASF,GAC9Cc,EAAaM,GAAKhB,EAAaJ,EAAImB,EAAEjB,SAASF,EAAImB,EAAEE,KAAKrB,GACzDc,EAAaQ,GAAKlB,EAAaH,EAAIkB,EAAEjB,SAASD,GAC9Ca,EAAaQ,GAAKlB,EAAaH,EAAIkB,EAAEjB,SAASD,EAAIkB,EAAEE,KAAKpB,KACxDsB,KAAI,SAAAJ,GACDvB,EAAK4B,IAAI,CACLC,OAAQN,EAAEM,OACVC,YAAaP,EAAEO,YACfC,GAAIR,EAAEQ,GACNC,OAAQ,CAAE5B,EAAGmB,EAAEjB,SAASF,EAAGC,EAAGkB,EAAEjB,SAASD,GACzC4B,OAAQ,CAAE7B,EAAGmB,EAAEjB,SAASF,EAAGC,EAAGkB,EAAEjB,SAASD,SAIzD6B,mBAAoB,SAACjB,EAAKC,GACjBlB,EAAKqB,MAAMY,OAGZjC,EAAK4B,KAAI,SAAAO,GAAoI,OAA7HA,EAAEF,OAAS,CAAE7B,EAAGc,EAAaM,GAAKN,EAAakB,GAAK5B,EAAaJ,EAAGC,EAAGa,EAAaQ,GAAKR,EAAamB,GAAK7B,EAAaH,GAAY8B,KAFpJ5B,EAAS,CAAEH,EAAGI,EAAaJ,EAAIc,EAAakB,GAAI/B,EAAGG,EAAaH,EAAKa,EAAamB,MAI1FC,sBAAuB,SAACrB,EAAKC,GACpBlB,EAAKqB,MAAMY,OAUZjC,EAAK4B,IAAI,KATTpB,EAAaJ,GAAKc,EAAakB,GAC/B5B,EAAaH,GAAKa,EAAamB,GACZ,IAAf1B,GACAjB,EAAM6C,WAAWC,SAAS,CACtBC,UAAW,gBAQ3B,IAEJ,OACI,wBAAC,WAAD,cAAMC,MAAO,CAAEC,KAAM,EAAGC,cAAe,MAAOC,SAAU,SAAUC,gBAAiB,YAAiBlC,EAAamC,aAC7G,wBAAC,UAAD,CAAML,MAAO,CAAEC,KAAM,EAAGK,QAAS,EAAGC,UAAY,CAAE,CAAEC,WAAY5C,EAASF,GAAK,CAAE+C,WAAY7C,EAASD,MAC/FV,EAAM0B,OAAS1B,EAAM0B,MAAMM,KAAI,SAAAyB,GAAC,OAC9B,wBAAC,EAAAC,oBAAD,cAAoBC,IAAMF,EAAEG,GAAKxD,wBAA0BL,EAAMK,yBAA8BqD,OAEnG,wBAAC,UAAD,CAAKI,OAAO,OAAOC,MAAM,OAAOf,MAAO,CAAEM,OAAQ,IAC3ClD,EAAWuB,OAASvB,EAAWuB,MAAMM,KAAI,SAAAJ,GAAC,OACxCzB,EAAWuB,MAAMC,QAAO,SAAAoC,GAAE,OAAKnC,EAAEQ,IAAM2B,EAAG3B,IAAMR,EAAEoC,cAAgBD,EAAG7B,QAAUN,EAAEqC,uBAAyBF,EAAG5B,eAAaH,KAAI,SAAA+B,GAAE,OAC5H,wBAAC,EAAAG,KAAD,CAAMP,IAAM/B,EAAEM,OAAS,IAAMN,EAAEO,YAAc,IAAM4B,EAAG7B,OAAS,IAAM6B,EAAG5B,YAAcgC,GAAKvC,EAAEjB,SAASF,EAAI,GAAK2D,GAAKxC,EAAEjB,SAASD,EAAI,GAAK2D,GAAKN,EAAGpD,SAASF,EAAI,GAAK6D,GAAKP,EAAGpD,SAASD,EAAI,GAAK6D,OAAO,UAAUC,YAAY,YAG/NnE,EAAKqB,OAASrB,EAAKqB,MAAMW,QAAUhC,EAAKqB,MAAMY,QAC5C,wBAAC,EAAA4B,KAAD,CAAMP,IAAI,OAAOQ,GAAK9D,EAAKqB,MAAMW,OAAO5B,EAAI2D,GAAK/D,EAAKqB,MAAMW,OAAO3B,EAAI2D,GAAKhE,EAAKqB,MAAMY,OAAO7B,EAAI6D,GAAKjE,EAAKqB,MAAMY,OAAO5B,EAAI6D,OAAO,UAAUC,YAAY,W,+DC/E9K,kBAAmBC,WACrBC,OAAOC,iBAAiB,QAAQ,WAC9BF,UAAUG,cACPC,SAAS,0BAA2B,CAAEC,MAAO,MAC7CC,MAAK,SAASC,OAGdC,OAAM,SAASC,GACdC,QAAQH,KAAK,oCAAqCE,U,iGCV1D,I,EAAA,UACeE,Q,mGCAf,aACA,QAIMC,GAAe,EAHrB,OAGqBC,sBAAqB,CACtCC,KAAM,CACJC,OAAQC,iBAEVC,MAAO,CACHF,OAAQG,gBAGd,CACEC,iBAAkB,OAClBC,WAAY,S,GAGC,IAAAC,oBAAmBT,G,iLCnBpC,UACA,QACA,SAGaI,E,iNACTvF,gBAAiB,IAAAI,iBAA+B,CAC5C,CAAEsD,GAAI,EAAGmC,KAAM,EAAGC,KAAM,SAAUC,IAAK,CAAExF,EAAG,IAAKC,EAAG,KAAOwF,QAAS,CAAC,CAAE5D,OAAQ,CAAE0B,aAAc,EAAGC,sBAAuB,MACzH,CAAEL,GAAI,EAAGmC,KAAM,EAAGC,KAAM,SAAUC,IAAK,CAAExF,EAAG,IAAKC,EAAG,KAAOyF,OAAQ,CAAC,IAAKD,QAAS,CAAC,CAAE5D,OAAQ,CAAE0B,aAAc,EAAGC,sBAAuB,GAAKvC,MAAO,QAAS,CAAEY,OAAQ,CAAE0B,aAAc,EAAGC,sBAAuB,GAAKvC,MAAO,WAC5N,CAAEkC,GAAI,EAAGmC,KAAM,EAAGC,KAAM,WAAYC,IAAK,CAAExF,EAAG,IAAKC,EAAG,KAAOyF,OAAQ,CAAC,KACtE,CAAEvC,GAAI,EAAGmC,KAAM,EAAGC,KAAM,WAAYC,IAAK,CAAExF,EAAG,IAAKC,EAAG,KAAOyF,OAAQ,CAAC,O,EAG1E/F,yBAA0B,IAAAE,iBAAwC,I,2EAG9D,OACI,wBAAC,EAAA8F,cAAD,CAAexD,WAAayD,KAAKtG,MAAM6C,WAAa1C,eAAiBmG,KAAKnG,eAAiBE,wBAA2BiG,KAAKjG,8B,GAZpGkG,iB,6ICLnC,U,6CAEA,QACA,SAGMC,EAA0BC,UAAWpF,OAAO,CAC9CqF,UAAW,CACb9F,SAAU,WACJ0C,OAAQ,EACRqD,UAAW,aACX5C,MAAO,IACP6C,QAAS,EACTxD,gBAAiB,SAErByD,UAAW,CACP9C,MAAO,GACPD,OAAQ,GACRgD,aAAc,IAErBC,UAAW,CACV7D,cAAe,MACTyD,UAAW,cAEfK,YAAa,CACT5D,gBAAiB,SAExB6D,WAAY,CACX/D,cAAe,MACTyD,UAAW,YAEfO,aAAc,CACV9D,gBAAiB,UAoBnB+D,EAAgC,SAACnH,GACnC,OACI,wBAAC,UAAD,CAAMgD,MAAQwD,EAAwBO,WAClC,wBAACK,EAAD,CACIC,UAAU,KACVlF,OAASnC,EAAMmC,OACfC,YAAcpC,EAAMoC,YACpB6B,aAAe,KACfC,sBAAwB,KACxB7D,wBAA0BL,EAAMK,0BAElCL,EAAM2B,OACJ,wBAAC,UAAD,KAAQ3B,EAAM2B,SAMxB2F,EAA6B,SAACtH,GAChC,OACI,wBAAC,UAAD,CAAMgD,MAAQwD,EAAwBS,YAChCjH,EAAM2B,OACJ,wBAAC,UAAD,KAAQ3B,EAAM2B,OAElB,wBAACyF,EAAD,CACIC,UAAU,MACVlF,OAASnC,EAAMmC,OACfC,YAAcpC,EAAMoC,YACpB6B,aAAejE,EAAMuC,OAAO0B,aAC5BC,sBAAwBlE,EAAMuC,OAAO2B,sBACrC7D,wBAA0BL,EAAMK,4BAM1C+G,EAA8B,SAACpH,GACjC,IACIuH,EADEC,GAAe,IAAAtH,cAAqCF,EAAMK,yBA2B1DoH,EAAkC,MAAnBzH,EAAMqH,UAAoB,QAAU,OAEzD,OACI,wBAAC,UAAD,CAAMK,IAAK,SAAAC,GAAWA,IAAGJ,EAAOI,IAAMC,SA3BzB,WACbL,GAAQA,EAAKM,SAAQ,SAACnH,EAAGC,EAAGoD,EAAOD,EAAQgE,EAAOC,GAC9CP,EAAatF,KAAI,SAAA8F,GACb,IAAIC,EAA0B,MAAnBjI,EAAMqH,UACXa,EAAQF,EAAEpG,QAAO,SAAAC,GAAC,OAAIA,EAAEQ,IAAM4F,GAAQpG,EAAEM,QAAUnC,EAAMmC,QAAUN,EAAEO,aAAepC,EAAMoC,eAe/F,OAdI8F,EAAMC,OAAS,EACfD,EAAM,GAAGtH,SAAW,CAAEF,EAAGoH,EAAOnH,EAAGoH,GAGnCC,EAAEI,KAAK,CACHjG,OAAQnC,EAAMmC,OACdC,YAAapC,EAAMoC,YACnBC,GAAI4F,EACJhE,aAAcjE,EAAMiE,aACpBC,sBAAuBlE,EAAMkE,sBAC7BtD,SAAU,CAAEF,EAAGoH,EAAOnH,EAAGoH,GACzBhG,KAAM,CAAErB,EAAG,GAAIC,EAAG,MAGnBqH,UASX,wBAAC,EAAAK,OAAD,CAAQC,KAAK,cAAcvG,KAAM,GAAIwG,MAAQd,M,qBAKvB,SAACzH,GAC/B,IAAMkB,EAAeV,UAAMW,SAAQ,kBAAMC,UAAaC,OAAO,CACzDC,6BAA8B,SAACC,EAAKC,GAAN,OAAuB,GACrDgB,mBAAoB,SAACjB,EAAKC,SAE1B,IAEJ,OACI,wBAAC,WAAD,cAAMwB,MAAQ,CAACwD,EAAwBE,UAAW,CAAE8B,IAAKxI,EAAMkG,IAAIvF,EAAG8H,KAAMzI,EAAMkG,IAAIxF,KAAWQ,EAAamC,aAC1G,wBAAC,UAAD,KACI,wBAAC,UAAD,KACMrD,EAAMiG,OAGhB,wBAAC,UAAD,CAAMjD,MAAO,CAAEE,cAAe,QACtC,wBAAC,UAAD,CAAMF,MAAO,CAAEC,KAAM,IACHjD,EAAMoG,QAAUpG,EAAMoG,OAAOnE,KAAI,SAACyG,EAAGC,GAAJ,OAC/B,wBAACxB,GAAD,cAA+BvD,IAAM5D,EAAM6D,GAAK,MAAQ8E,EAAKxG,OAASnC,EAAM6D,GAAKzB,YAAcuG,EAAMtI,wBAA0BL,EAAMK,yBAA+BqI,QAGxL,wBAAC,UAAD,CAAM1F,MAAO,CAAEC,KAAM,IACHjD,EAAMmG,SAAWnG,EAAMmG,QAAQlE,KAAI,SAAC2G,EAAGD,GAAJ,OACjC,wBAACrB,GAAD,cAA4B1D,IAAM5D,EAAM6D,GAAK,OAAS8E,EAAKxG,OAASnC,EAAM6D,GAAKzB,YAAcuG,EAAMtI,wBAA0BL,EAAMK,yBAA+BuI,Y,2JCnJ1L,U,sBAGahD,E,yLAEP,OACE,wBAAC,UAAD,CAAM5C,MAAO,CAAEC,KAAM,EAAG4F,WAAY,SAAUC,eAAgB,WAC5D,wBAAC,UAAD,CAAM9F,MAAO,CAAE+F,SAAU,KAAzB,yB,GAJuBvI,UAAMwI,W","file":"static/js/app.869d97d4.chunk.js","sourcesContent":["export * from \"./process.screen\";\r\nexport * from \"./process.editor\";\r\nexport * from \"./process.node.display\";\r\nexport * from \"./process.selector\";","import React from \"react\";\r\nimport { View, Text, PanResponder } from \"react-native\";\r\nimport { ProcessNodeDisplay } from \".\";\r\nimport { useStateLink, createStateLink } from \"@hookstate/core\";\r\nimport Svg, { Line, Path } from \"react-native-svg\";\r\nimport { ProcessNode, ProcessNodeConnector, XYValue } from \"~/components\";\r\n\r\ninterface DragLine {\r\n    idNode?: number;\r\n    idParameter?: number;\r\n    in?: boolean;\r\n    origin?: XYValue;\r\n    target?: XYValue;\r\n}\r\n\r\nexport const ProcessEditor = (props) => {\r\n    const nodes = useStateLink<ProcessNode[]>(props.processNodesSL);\r\n    const connectors = useStateLink<ProcessNodeConnector[]>(props.processNodeConnectorsSL);\r\n    const line = useStateLink<DragLine>(createStateLink<DragLine>({}));\r\n\r\n    const [position, setState] = React.useState({ x: 0, y: 0 });\r\n    const lastPosition = React.useRef({ x: 0, y: 0 }).current;\r\n    let pressCount = 0;\r\n    const panResponder = React.useMemo(() => PanResponder.create({\r\n        onStartShouldSetPanResponder: (evt, gestureState) => true,\r\n        onPanResponderGrant: (evt, gestureState) => {\r\n            pressCount += 1;\r\n            setTimeout(() => {\r\n                pressCount = 0;\r\n            }, 500);\r\n\r\n            connectors.value.filter(c => \r\n                gestureState.x0 - lastPosition.x > c.position.x &&\r\n                gestureState.x0 - lastPosition.x < c.position.x + c.size.x &&\r\n                gestureState.y0 - lastPosition.y > c.position.y &&\r\n                gestureState.y0 - lastPosition.y < c.position.y + c.size.y)\r\n                .map(c => {\r\n                    line.set({\r\n                        idNode: c.idNode,\r\n                        idParameter: c.idParameter,\r\n                        in: c.in,\r\n                        origin: { x: c.position.x, y: c.position.y },\r\n                        target: { x: c.position.x, y: c.position.y }\r\n                    });\r\n                })\r\n        },\r\n        onPanResponderMove: (evt, gestureState) => {\r\n            if (!line.value.target)\r\n                setState({ x: lastPosition.x + gestureState.dx, y: lastPosition.y +  gestureState.dy });\r\n            else\r\n                line.set(l => { l.target = { x: gestureState.x0 + gestureState.dx - lastPosition.x, y: gestureState.y0 + gestureState.dy - lastPosition.y }; return l; });\r\n        },\r\n        onPanResponderRelease: (evt, gestureState) => {\r\n            if (!line.value.target) {\r\n                lastPosition.x += gestureState.dx;\r\n                lastPosition.y += gestureState.dy;\r\n                if (pressCount === 2) {\r\n                    props.navigation.navigate({\r\n                        routeName: 'Modal'\r\n                    });\r\n                }\r\n            }\r\n            else\r\n                line.set({});\r\n        },\r\n        \r\n    }), []);\r\n\r\n    return (\r\n        <View style={{ flex: 1, flexDirection: \"row\", overflow: \"hidden\", backgroundColor: \"#999999\" }} {...panResponder.panHandlers} > \r\n            <View style={{ flex: 1, zIndex: -1, transform: ([ { translateX: position.x }, { translateY: position.y }]) }} >\r\n                { nodes.value && nodes.value.map(n => \r\n                    <ProcessNodeDisplay key={ n.id } processNodeConnectorsSL={ props.processNodeConnectorsSL } {...n } />\r\n                )}\r\n                <Svg height=\"100%\" width=\"100%\" style={{ zIndex: 2 }} >\r\n                    { connectors.value && connectors.value.map(c => \r\n                        connectors.value.filter(cc => !c.in && cc.in && c.idTargetNode == cc.idNode && c.idTargetNodeParameter == cc.idParameter).map(cc => \r\n                            <Line key={ c.idNode + \"-\" + c.idParameter + \"-\" + cc.idNode + \"-\" + cc.idParameter } x1={ c.position.x + 10 } y1={ c.position.y + 10 } x2={ cc.position.x + 10 } y2={ cc.position.y + 10 } stroke=\"#990000\" strokeWidth=\"5\" />\r\n                        )\r\n                    )}\r\n                    { line.value && line.value.origin && line.value.target &&\r\n                        <Line key=\"line\" x1={ line.value.origin.x } y1={ line.value.origin.y } x2={ line.value.target.x } y2={ line.value.target.y } stroke=\"#990000\" strokeWidth=\"5\" />\r\n                    }\r\n                </Svg>\r\n            </View>   \r\n        </View>\r\n    );\r\n}","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function() {\n    navigator.serviceWorker\n      .register('/expo-service-worker.js', { scope: '/' })\n      .then(function(info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function(error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n","import App from './src';\nexport default App;","import React, { PureComponent } from \"react\";\r\nimport { ProcessEditor, ModalScreen, ProcessScreen } from \"./screens/process.editor\";\r\nimport { createAppContainer } from 'react-navigation';\r\nimport { createStackNavigator } from 'react-navigation-stack';\r\nimport { Modal } from \"react-native\";\r\n\r\nconst AppNavigator = createStackNavigator({\r\n    Home: {\r\n      screen: ProcessScreen,\r\n    },\r\n    Modal: {\r\n        screen: ModalScreen\r\n    },\r\n  }, \r\n  {\r\n    initialRouteName: 'Home',\r\n    headerMode: 'none'\r\n  });\r\n  \r\n  export default createAppContainer(AppNavigator);","import React, { PureComponent } from \"react\";\r\nimport { createStateLink, StateInf, StateLink } from '@hookstate/core';\r\nimport { ProcessEditor } from \"./process.editor\";\r\nimport { ProcessNode, ProcessNodeConnector } from \"~/components\";\r\n\r\nexport class ProcessScreen extends PureComponent<any> {\r\n    processNodesSL = createStateLink<ProcessNode[]>([\r\n        { id: 1, type: 1, desc: \"Node 1\", pos: { x: 100, y: 200 }, outputs: [{ target: { idTargetNode: 2, idTargetNodeParameter: 0 }}]},\r\n        { id: 2, type: 1, desc: \"Node 2\", pos: { x: 300, y: 200 }, inputs: [{}], outputs: [{ target: { idTargetNode: 3, idTargetNodeParameter: 0 }, value: \"True\"}, { target: { idTargetNode: 4, idTargetNodeParameter: 0 }, value: \"False\"}]},\r\n        { id: 3, type: 1, desc: \"Node 3.1\", pos: { x: 500, y: 150 }, inputs: [{}]},\r\n        { id: 4, type: 1, desc: \"Node 3.2\", pos: { x: 500, y: 350 }, inputs: [{}]}\r\n    ]);\r\n\r\n    processNodeConnectorsSL = createStateLink<ProcessNodeConnector[]>([]);    \r\n\r\n    render() {\r\n        return (\r\n            <ProcessEditor navigation={ this.props.navigation } processNodesSL={ this.processNodesSL } processNodeConnectorsSL= { this.processNodeConnectorsSL } />\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport { View, Text, PanResponder, StyleSheet } from \"react-native\";\r\nimport { StateInf, StateLink, useStateLink } from \"@hookstate/core\";\r\nimport { Entypo } from \"@expo/vector-icons\";\r\nimport { InParameter, OutValue, ProcessNode, ProcessNodeConnector } from \"~/components\";\r\n\r\nconst ProcessNodeDisplayStyle = StyleSheet.create({\r\n    container: {\r\n\t\tposition: \"absolute\",\r\n        zIndex: 1,\r\n        alignSelf: \"flex-start\",\r\n        width: 150,\r\n        padding: 5,\r\n        backgroundColor: \"white\"\r\n    },\r\n    connector: {\r\n        width: 20,\r\n        height: 20,\r\n        borderRadius: 20/2\r\n    },\r\n\tinContent: {\r\n\t\tflexDirection: \"row\",\r\n        alignSelf: \"flex-start\"\r\n    },\r\n    inConnector: {\r\n        backgroundColor: \"green\"\r\n    },\r\n\toutContent: {\r\n\t\tflexDirection: \"row\",\r\n        alignSelf: \"flex-end\",\r\n    },\r\n    outConnector: {\r\n        backgroundColor: \"blue\"\r\n    }\r\n})\r\n\r\nexport interface ProcessNodeDisplayProps extends ProcessNode {\r\n    processNodeConnectorsSL: StateInf<StateLink<ProcessNodeConnector[]>>;\r\n}\r\n\r\nexport interface ProcessNodeDisplayInParameterProps extends InParameter {\r\n    idNode: number,\r\n    idParameter: number,\r\n    processNodeConnectorsSL: StateInf<StateLink<ProcessNodeConnector[]>>;\r\n}\r\n\r\nexport interface ProcessNodeDisplayOutValueProps extends OutValue {\r\n    idNode: number,\r\n    idParameter: number,\r\n    processNodeConnectorsSL: StateInf<StateLink<ProcessNodeConnector[]>>;\r\n}\r\n\r\nconst ProcessNodeDisplayInParameter = (props: ProcessNodeDisplayInParameterProps) => {\r\n    return (\r\n        <View style={ ProcessNodeDisplayStyle.inContent }>\r\n            <ProcessNodeDisplayConnector\r\n                direction=\"in\"                \r\n                idNode={ props.idNode }\r\n                idParameter={ props.idParameter }\r\n                idTargetNode={ null }\r\n                idTargetNodeParameter={ null }\r\n                processNodeConnectorsSL={ props.processNodeConnectorsSL }\r\n            />\r\n            { props.value && \r\n                <Text>{ props.value }</Text>\r\n            }\r\n        </View>\r\n    );\r\n}\r\n\r\nconst ProcessNodeDisplayOutValue = (props: ProcessNodeDisplayOutValueProps) => {\r\n    return (\r\n        <View style={ ProcessNodeDisplayStyle.outContent }>\r\n            { props.value && \r\n                <Text>{ props.value }</Text>\r\n            }\r\n            <ProcessNodeDisplayConnector\r\n                direction=\"out\"\r\n                idNode={ props.idNode }\r\n                idParameter={ props.idParameter }\r\n                idTargetNode={ props.target.idTargetNode }\r\n                idTargetNodeParameter={ props.target.idTargetNodeParameter }\r\n                processNodeConnectorsSL={ props.processNodeConnectorsSL }\r\n            />\r\n        </View>\r\n    );\r\n}\r\n\r\nconst ProcessNodeDisplayConnector = (props) => {    \r\n    const connectorsSL = useStateLink<ProcessNodeConnector[]>(props.processNodeConnectorsSL);\r\n    let _ref: View;\r\n\r\n    const layoutCb = () => {\r\n        _ref && _ref.measure((x, y, width, height, pageX, pageY) => {\r\n            connectorsSL.set(s => {\r\n                let isIn = props.direction == \"in\";\r\n                const conns = s.filter(c => c.in == isIn && c.idNode == props.idNode && c.idParameter == props.idParameter);        \r\n                if (conns.length > 0) {\r\n                    conns[0].position = { x: pageX, y: pageY };\r\n                }\r\n                else {\r\n                    s.push({\r\n                        idNode: props.idNode,\r\n                        idParameter: props.idParameter,\r\n                        in: isIn,\r\n                        idTargetNode: props.idTargetNode,\r\n                        idTargetNodeParameter: props.idTargetNodeParameter,\r\n                        position: { x: pageX, y: pageY },\r\n                        size: { x: 20, y: 20 }            \r\n                    })\r\n                }\r\n                return s;\r\n            });\r\n        });\r\n    }\r\n\r\n    const connectorDir = props.direction == \"in\" ? \"green\" : \"blue\";\r\n\r\n    return (\r\n        <View ref={r => { if (r) _ref = r; }} onLayout={ layoutCb }>\r\n            <Entypo name=\"arrow-right\" size={18} color={ connectorDir } />\r\n        </View>\r\n    )\r\n}\r\n\r\nexport const ProcessNodeDisplay = (props: ProcessNodeDisplayProps) => {\r\n    const panResponder = React.useMemo(() => PanResponder.create({\r\n        onStartShouldSetPanResponder: (evt, gestureState) => true,\r\n        onPanResponderMove: (evt, gestureState) => {\r\n        }\r\n    }), []);\r\n\r\n    return (\r\n        <View style={ [ProcessNodeDisplayStyle.container, { top: props.pos.y, left: props.pos.x }] } {...panResponder.panHandlers}>\r\n            <View>\r\n                <Text>\r\n                    { props.desc }\r\n                </Text>\r\n            </View>\r\n            <View style={{ flexDirection: \"row\" }}>\r\n\t\t\t\t<View style={{ flex: 1 }}>\r\n                    { props.inputs && props.inputs.map((i, idx) => \r\n                        <ProcessNodeDisplayInParameter key={ props.id + \"-in\" + idx} idNode={ props.id } idParameter={ idx } processNodeConnectorsSL={ props.processNodeConnectorsSL } { ...i } />\r\n                    )}\r\n\t\t\t\t</View>\r\n\t\t\t\t<View style={{ flex: 1 }}>\r\n                    { props.outputs && props.outputs.map((o, idx) =>\r\n                        <ProcessNodeDisplayOutValue key={ props.id + \"-out\" + idx} idNode={ props.id } idParameter={ idx } processNodeConnectorsSL={ props.processNodeConnectorsSL } { ...o } />\r\n                    )}\r\n\t\t\t\t</View>\r\n            </View>\r\n        </View>\r\n    )\r\n}","import React from \"react\";\r\nimport { View, Text, Button } from \"react-native\";\r\n\r\nexport class ModalScreen extends React.Component {\r\n    render() {\r\n      return (\r\n        <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\r\n          <Text style={{ fontSize: 30 }}>This is a modal!</Text>\r\n        </View>\r\n      );\r\n    }\r\n  }\r\n  "],"sourceRoot":""}